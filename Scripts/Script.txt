
지영재 



<1>

안녕하십니까 
이번에 여행지기 프로젝트를 담당하게 된 ESP 입니다. 
지금부터 여행지기 VR VOD 인프라 구축에 대한 설명을 시작하겠습니다.


<2>

목차입니다.
가장먼저 이번 프로젝트를 맡은 ESP 회사와 프로젝트를 의뢰한 클라이언트 소개해드리고
클라이언트의 요청사항과 그에따른 저희의 솔루션 설명 순서로 발표를 진행하겠습니다.

저는 회사소개와 클라이언트소개를 맡은 OOO입니다.


<3>
그러면 본격적으로 회사소개부터 시작하도록하겠습니다.

<4>
ESP는 Enhanced Service Partner라는 의미로 보다 더 나은 서비스를 제공하겠다라는 의미를 가지고 있습니다.
저희가 제공하는 서비스로는 네트워크 인프라구축, 보안 스크립트 제작, 클라우드 인프라관리가 있습니다.


<5>
다음으로는 클라이언트를 소개해드리겠습니다.


<6>
이번에 의뢰를 맡긴 클라이언트 "여행지기"는 2006년에 설립된 여행사입니다.
유럽, 아시아, 미대륙 등 다양한 국가의 여행을 즐길 수 있는 가이트 투어와  패키지상품을 제공하고 있으며 그 외에도 숙박 및 항공 예약 서비스도 제공하고있습니다.



<7>

워라벨에 대한 관심의 증가로 꾸준한 상승을 보이던 여행사의 매출은 코로나의 유행을 기점으로 급격하게 감소하게 됩니다.

갑작스러운 바이러스의 여파로 여행사들은 예정되어있던 모든 예약을 취소해야했고
각나라별 외국인 입국제한 및 금지 정책으로 인해 해외여행을 나갈 수 없는 상황에서 여행사는 계속 침체되어갔습니다. 

이에 여행지기에서는 고객들이 바이러스 감염이라는 걱정없이 안전하게 여행을 즐길 수있는 방법을 고민하게 되었고
그 결과는  


<8>
VR을 통한 여행입니다.
현재 각광 받고 있는 기술인 "VR"과 "여행"을 접목시켜 새로운 여행 패키지를 만들어보는 것은 어떨까 생각하게 되었습니다.

여행지기는 기존의 커넥션을 활용하여 현지 가이드 분이 직접 촬영한 영상과 VR기술을 통해 서비스를 제공할 예정이며
고객들은 해당 서비스를 통해 집안에서 여러나라를 방문하며 현지 가이드 투어를 하는 것과 같은 서비스를 제공받을 수있습니다. 


<9>
다음은 여행지기에서 이번 사업을 홍보하기 위해 추진하고 있는 SNS 이벤트입니다.
sns와 해시태그를 이용해 VR Tour를 홍보하고 젊은 층의 신규고객을 유치할 뿐아니라 
오랫동안 변화가 없었던 브랜드의 이미지를 깨뜨리고 현대적인 이미지로 변화시키기 위해 sns라는 홍보수단을 사용했습니다.


===================================================================================


박유진


<10>

발표를 이어가겠습니다.
클라이언트의 요청사항과 그에맞는 솔루션 설명을 진행할 발표자 OOO입니다.


<11> 

한 연구결과에 따르면 sns를 이용한 홍보효과는 인스타그램을 기준으로 
방문자가 약 352퍼센트 증가한다고 합니다.

하지만 여행지기의 경우 자체 인프라망을 사용하기에는
창립 이후로 별도의 장비를 추가하거나 업그레이드하지 않았고

이벤트와 VR 스트리밍으로 발생할 트래픽에 대한 준비가 되어있지 않았습니다.

다음과 같은 요구사항을 제시합니다.


<12>

요구사항 1번부터 읽으시면됩니다.

<13>
Aws 마이그레이션 솔루션 설명을 할 박유진입니다. 
앞서 여행지기에서 보낸 요청사항에 맞춰 저희가 구축한 솔루션을 간략하게 먼저 소개해드리겠습니다.

<14>
첫번째는 AWS 마이그레이션, 신규인프라를 aws를 통해 마이그레이션 시켜 기존인프라와 연결했습니다. 
두번째는 인프라 업그레이드, 로드밸런싱을 통해 트래픽 부담을 줄이고 
스트리밍 서비스를 제공할 수 있는 구성의 신규 웹사이트를 제작합니다.
0세번째가 보안과 백업 강화,
AWS의 IAM, RDS&S3,Security group을 통해 보안성과 백업기능을 강화했습니다.
네번째는 Video on demand,
Vr 투어를 고객에게 제공할 수 있는 VOD인프라를 구축했습니다.
마지막으로 관리의 용이성,
클라이언트가 해당 인프라를 편하고 효율적으로 관리할 수 있도록 
클라우드와치, 앤서블, 자빅스를 사용할 생각입니다.

<15>
먼저 AWS마이그레이션에 대해 자세하게 설명해 드리겠습니다.

<16>
지금 보고계시는 토폴로지가 기존 여행지기의 네트워크 인프라입니다. 
저희는 웹서버 부분을 AWS로 마이그레이션 했습니다.

<17>
다음 토폴로지가 저희가 구축한 클라우드 인프라입니다.
먼저 스트리밍 서비스를 위해 Cloudfront를 S3 bucket과 연결하여 업로드 되는 영상을 Route53을 통해 
사용자의 웹브라우저로 스트리밍할 수 있도록 배치했습니다.
가용영역 두개에 각각 public subnet 1개와 private subnet 2개를 배치해서 
ALB로 출입하는 트래픽에 대해 로드밸런싱하도록 했습니다.
public subnet에는 nat gateway와 bastion host를 둬서 private subet의 웹서버가 안전하게 외부와 연결되면서
서버를 관리하기가 용이하고 또 안전하도록 설계했습니다.
private subnet의 웹서버는 오토스케일링 그룹으로 지정해서 
트래픽이 집중되도 부하부담을 줄일 수 있도록 했고
다른 private subnet에는 RDS를 배치하여 데이터를 안전하게 보관하는 동시에
마스터와 슬래브로 각각 나누어서 자동으로 백업을 하도록 설정했습니다.

<18>
위에서 설명드린 클라우드를 저희는 클라우드 포메이션을 통해 구축했습니다.
FTUser라는 IAM유저를 생성하고 vpc와 Subnet, 인터넷 및 나트 게이트웨이, 인스턴스, rds를 구축했습니다.
클라우드 포메이션의 자세한 코드는 기술문서에 기재했습니다.

<19>
그리고 이렇게 구축한 클라우드를 기존의 인프라와 다이렉트 커넥트 기능을 통해 연결했습니다. 
다이렉트 커넥트는 하이브리드 클라우드를 구축할 때 필요한 기술로, 고속 데이터 전송을 할 수 있습니다.
그리고 
다이렉트 커넥스 위치 연결크기를 결정하고 AWS관리콘솔에서 연결요청을 생성하고 승인서를 다운로드 받은 후
APN파트너에게 LoA를 제공하여 대신 연결을 설정하도록 요청합니다.
네트워크 연결을 설정하도록 가상 인터페이스를 구성하는 것으로
다이렉트 커넥트를 연결할 수 있습니다.



=====================================================================================


전소현



<20>

여행지기의 2번째 요구사항에 대한 솔루션입니다.

인프라 향상에 대한 솔루션으로 ESP에서는 



<21>

ALB 서비스를 사용했습니다.

ALB는 둘 이상의 가용영역에서 수신되는 트래픽을 

자동분산하는 기능을 가지고 있습니다.

이때 자동분산 되는 과정에서 

등록된 대상의 상태를 지속적으로 모니터링하여

비교적 상태가 양호한 대상으로 우선적으로 라우팅하기때문에

이벤트 등의 특수한 상황에서 트래픽을 관리하기에 필수적으로 필요한 서비스라고 할 수 
있습니다.



오른쪽 사진자료는 웹서버를 로드밸런싱 설정을 한 후 사이트 접속했을때 로드밸런싱 설정에 의해 
랜덤하게 나오는 화면을 캡쳐한 사진입니다.

이때 기존에 존재하던 2개의 웹서버와 오토스케일링에 의해 추가된 2개의 웹인스턴스를 포함해
총 4개의 서버에서 사이트가 랜덤하게 보여지는 것을 확인할 수있습니다.



<22>

인프라 향상에 대한 2번째 솔루션은 auto scaling입니다.

오토 스케일링은 애플리케이션을 모니터링하고 용량을 자동조정하여
안정적으로 성능을 유지할 수 있게 해 주는 서비스입니다.

여기서 용량은 오른쪽 사진자료와 같이 오토스케일링을 설정할때 최소 용량, 원하는 용량, 최대용량의 형태로 지정하며
이때 지정된 용량범위 안에서 인스턴스를 생성 또는 삭제를 진행합니다. 

오토 스케일링은 모니터링 기능이 있기때문에 이벤트와 같이 갑자기 많은 트래픽이 발생할때 유리한 서비스이며

또한 오토 스케일링은 앞서 설명해드린 로드밸런싱과 함께 사용할 경우 오토스케일링에 의해 생성된 인스턴스가
자동으로 로드밸런서에 등록 및 취소되기때문에 더욱 유용하게 사용할 수 있습니다.


아래에 있는 자료는 시작구성 생성 사진입니다.
오토스케일링 설정에는 인스턴스 생성 시 사용될 시작구성을 필요로하는데 
여행지기는 웹사이트에 대한 트래픽제어가 목적이기때문에 
Web Server의 AMI를 이용하여 시작구성을 생성하였습니다.


<23>

지금보시는 페이지는 오토스케일링 테스트 페이지입니다.

오토스케일링에 등록한 인스턴스의 CPU를 인위적으로 올렸을때 지정한 용량범위 안에서 
인스턴스가 잘 생성이 되는지 테스트를 진행해보았습니다.

왼쪽 상단에 있는 자료를 보시면 새로운 WEB 인스턴스 2개가 생성되어서 
기존의 Web Server 2개를 포함해 총 4개의 인스턴스가 동작되고있는것을 확인하실수있습니다.


<24>

다음은 3번째 요청사항에 대한 솔루션입니다.

여행지기의 경우 비자관리, 항공권예약등의 서비스를 제공하는 여행사의
특성상 고객의 중요정보를 가지고 있기 때문에
더욱 향상된 보안과 백업 기능을 요청사항으로 제시해 주셨습니다.

이에 대한 ESP의 첫번째 솔루션은  


<25>

IAM 입니다.

IAM은 Identify and Access Management의 약자로 AWS 리소스에 대한 액세스를 안전하게 제어할 수 있는
웹서비스입니다.

IAM 서비스에서는 유저와 유저그룹을 생성하고 유저별로 다른 역할과 권한을 부여함으로써 
현재 로그온한 계정에 대한 활동을 제어합니다.

또한 계정에는 추가로 MFA 설정을 통해 보안을 강화할수있는데
여기서 MFA는 멀티팩터 인증을 의미하며 등록된 디바이스의 코드를 제공해야 계정에 접근할 수 있도록 제한하는 설정입니다. 
쉽게 말해서 저희가 흔히 게임이나 금융서비스에 사용하는 OTP 서비스라고 생각하시면 됩니다.

아래의 자료를 보시면 CloudFormation을 통해 FTUSer 계정을 생성한 후에 MFA 설정을 추가하여
보안을 강화하였습니다.


<26>

다음 솔루션은 Security Group을 이용한 보안 강화 방법입니다.

보안 그룹은 방화벽을 구축하여 인바운드 또는 아웃바운드 트래픽을 제어하는 AWS 서비스입니다.
생성한 보안그룹은 VPC, EC2 인스턴스 등에 다양하게 적용 가능하며
주로 인스턴스에 사용하여 허가 받지않은 IP대역대 또는 포트로부터의 접근을 제어합니다.

아래의 그림을 보시면 HTTP 인바운드를 허용하는 보안그룹과 
SSH의 인바운드를 허용하는 보안그룹을 각각 생성하여 Bastion 호스트와 Web Server에 적용하였습니다.  


====================================================================================


김재우


<27>
안녕하세요. VOD 단락부터 발표를 진행할 김재우라고합니다.

<28>
먼저 VOD가 무엇인지 살펴보기 전에 모태가 된 On Demand부터 살펴봐야하는데요.
On Demand란 소비자가 있는 곳까지 찾아가서 상품과 서비스를 제공하는 것을 말합니다.
즉 On Demand에 Video가 붙은 VOD 같은 경우,
통신망 연결을 통해, 사용자가 원하는 영상을, 원하는 시간에 제공하는 것을 뜻합니다.

<29>

이를 구현하기 위해 다음과 같은 아키텍쳐를 설계하게 되었습니다.
일단 원본 영상을 S3에 업로드 합니다.
이후 Lambda를 통해 미디어 컨버터를 거치게 됩니다.
이때 클라우드 와치와 Lambda를 연계하여 작업이 완료됐을 때 SNS로 (이메일 전송)이 진행됩니다.
그럼 목적지 S3 버켓에 컨버트 된 영상이 업로드 되고요.
클라우드 프론트를 통해 전 세계로 배포할 수 있는 여건을 완성하게 됩니다.

<30>

아키텍쳐에서 사용한 Lambda는 원하는 때마다 작동시킬 수 있는 서비스입니다.
설계상 SNS와 연동해서 알림을 보냈고, 비디오를 컨버팅할 때 사용하였습니다.

<31>

실제로 Lambda와 SNS 연동이 성공적으로 실행되었습니다.
다음과 같이 이메일로 비디오 스트리밍 주소가 보내진 것을 확인할 수 있습니다.

<32>

이처럼 SNS를 통해 받은 비디오 스트리밍 주소를 사이트에 업로드하면,
이용자가 접속할 때, S3와, 클라우드 프론트를 통해 전 세계에서 스트리밍할 수 있게 됩니다.

<33>
그 밖에 인프라 관리의 용이성을 위해 편의성도 추가했습니다.

<34>
CloudWatch의 알림 서비스를 이용해 인스턴스 과부하 알람을 설정하였습니다.
이를 통해 앞에서 말했듯 좀 더 유연한 인프라 구성을 완료할 수 있었습니다.

<35>
서버단에서는 환경 자동화 도구 엔서블을 사용했습니다.
Bastion 서버를 거쳐 내부 망의 서버를 관리할 때 편리하게 만들었습니다.
또한, Lynis라는 보안 체크 툴의 인벤토리를 만들어놓아서 보안 체크를 한 번에 진행할 수 있습니다.

<36>
상태를 체크하기 위해서는 ZABBIX라는 모니터링 서비스 툴을 구현했습니다.
이를 통해 에이전트의 상태를 확인하고, 실시간으로 장애 발생을 전달할 수 있게 되었습니다.

<37>
다음은 실제로 구성된 내용이며 ZABBIX의 모니터링 페이지입니다.
보시는 바처럼 CPU나 시스템 로드율 그리고 오류 메세지를 확인할 수 있습니다.

<38>

<39>
이 프로젝트를 진행하기 위해 프로젝트 일정을 꼼꼼하게 짜서 진행했습니다.

<40>
이 외에도 유연한 역할 분담으로 완성해나갔습니다.

<41>
이를 위해 사용한 도구는 협업툴 잔디이며, 덕분에 효율적인 작업을 진행하였습니다.

<42>
아래 깃허브에서 여태까지 사용했던 기술문서들을 확인할 수 있습니다.

<43>
그럼 이상으로 발표를 마치겠습니다. 감사합니다.

















